{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /home/victor/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to /home/victor/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /home/victor/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import nltk\n",
    "import spacy\n",
    "import string\n",
    "import seaborn as sns\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "from nltk.corpus import stopwords, wordnet\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "nltk.download('wordnet')\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler \n",
    "from sklearn.metrics import *\n",
    "import sklearn.model_selection\n",
    "from sklearn.model_selection import *\n",
    "from sklearn.linear_model import *\n",
    "from sklearn.ensemble import *\n",
    "from sklearn.svm import *\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.feature_extraction.text import *\n",
    "\n",
    "import emot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Client support"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Data extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"../../data/extraction_twint/tweets_data/data_service_clients/with_reply_time/amazon.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_df = pd.read_csv(filename)\n",
    "df = full_df[[\"tweet\",\"reply_time\"]].copy()\n",
    "df= df.rename(columns={'tweet':'raw'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'conversation_id', 'created_at', 'timezone', 'user_id',\n",
       "       'username', 'name', 'place', 'tweet', 'mentions', 'urls', 'photos',\n",
       "       'replies_count', 'retweets_count', 'likes_count', 'hashtags',\n",
       "       'cashtags', 'link', 'retweet', 'quote_url', 'video', 'near', 'geo',\n",
       "       'source', 'user_rt_id', 'user_rt', 'retweet_id', 'reply_to',\n",
       "       'retweet_date', 'translate', 'trans_src', 'trans_dest', 'datetime',\n",
       "       'reply_time'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['raw', 'reply_time'], dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>raw</th>\n",
       "      <th>reply_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Wt a disgusting amazon ! @JeffBezos @AmitAgarw...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>\"On the way but running late\" is what I always...</td>\n",
       "      <td>0 days 00:02:42.000000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7866061659 is call for refund your money this ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>It’s from Amazon @AmazonUK</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Check DM. \\nI have sent details.</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 raw  \\\n",
       "0  Wt a disgusting amazon ! @JeffBezos @AmitAgarw...   \n",
       "1  \"On the way but running late\" is what I always...   \n",
       "2  7866061659 is call for refund your money this ...   \n",
       "3                         It’s from Amazon @AmazonUK   \n",
       "4                   Check DM. \\nI have sent details.   \n",
       "\n",
       "                  reply_time  \n",
       "0                        NaN  \n",
       "1  0 days 00:02:42.000000000  \n",
       "2                        NaN  \n",
       "3                        NaN  \n",
       "4                        NaN  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6839, 2)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1657"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(df.reply_time.isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reply time to timedelta\n",
    "df['reply_time']=df['reply_time'].map(pd.to_timedelta)\n",
    "\n",
    "#reply time in minutes\n",
    "df['reply_time']=df['reply_time'].map(lambda x: x.days*1440 + x.seconds//60)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"raw\"] = df[\"raw\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
=======
   "execution_count": 10,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "raw            object\n",
       "reply_time    float64\n",
       "dtype: object"
      ]
     },
<<<<<<< HEAD
     "execution_count": 13,
=======
     "execution_count": 10,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
<<<<<<< HEAD
=======
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"raw\"] = df[\"raw\"].astype('str')"
   ]
  },
  {
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Pre-processing"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 14,
=======
   "execution_count": 12,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [],
   "source": [
    "df['has_reply'] = df['reply_time'].map(lambda x : not(math.isnan(x)))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 15,
=======
   "execution_count": 13,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     5182\n",
       "False    1657\n",
       "Name: has_reply, dtype: int64"
      ]
     },
<<<<<<< HEAD
     "execution_count": 15,
=======
     "execution_count": 13,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['has_reply'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Change text"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 16,
=======
   "execution_count": 14,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def remove_uppercase(text):\n",
    "    return text.lower()\n",
    "    \n",
    "def remove_punctuation(text):\n",
    "    \"\"\"custom function to remove the punctuation\"\"\"  \n",
    "    PUNCT_TO_REMOVE = string.punctuation\n",
    "    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n",
    "\n",
    "def remove_stopwords(text):\n",
    "    \"\"\"custom function to remove the stopwords\"\"\"\n",
    "    STOPWORDS = set(stopwords.words('english'))\n",
    "    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n",
    "\n",
    "def remove_frequent_words(text):\n",
    "    FREQWORDS = get_frequent_words(df)\n",
    "    return \" \".join([word for word in str(text).split() if word not in FREQWORDS])\n",
    "\n",
    "# def remove_urls(text):\n",
    "#     url_pattern = re.compile(r'https?://\\S+|www\\.\\S+')\n",
    "#     expression = re.compile(r'https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*')\n",
    "#     text =  url_pattern.sub(r'', text)\n",
    "#     return expression.sub(r'', text)\n",
    "\n",
    "def remove_urls(text):\n",
    "    words=[]\n",
    "    for w in text.split(\" \"):\n",
    "        if not(w.startswith(\"http\") or w.startswith(\"www\") or w.startswith(\"pic.twitter\")):\n",
    "            words+=[w]\n",
    "    return ' '.join(words)\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 17,
=======
   "execution_count": 15,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'@AmazonHelp', 'I', 'a', 'and', 'is', 'it', 'my', 'the', 'to', 'you'}"
      ]
     },
<<<<<<< HEAD
     "execution_count": 17,
=======
     "execution_count": 15,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_frequent_words(column):\n",
    "    cnt = Counter()\n",
    "    for text in column.values:\n",
    "        for word in text.split():\n",
    "            cnt[word] += 1\n",
    "    FREQWORDS = set([w for (w, wc) in cnt.most_common(10)])\n",
    "    #RAREWORDS = set([w for (w, wc) in cnt.most_common()[:-10-1:-1]])\n",
    "    return FREQWORDS\n",
    "\n",
    "get_frequent_words(df.raw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Emoticons to words"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 20,
=======
   "execution_count": 16,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "game is on fire fire loudly_crying_face\n"
     ]
    }
   ],
   "source": [
    "def convert_emojis(text):\n",
    "    emo= emot.emoji(text)\n",
    "    for i in range(len(emo['value'])):\n",
    "        text = text.replace(emo['value'][i], emo['mean'][i]).replace(\":\",\"\")\n",
    "    return text\n",
    "\n",
    "text = \"game is on 🔥 🔥 😭\"\n",
    "print(convert_emojis(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Chat words conversion"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 21,
=======
   "execution_count": 17,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [],
   "source": [
    "words = \"../../source/slang.txt\"\n",
    "with open(words, 'r') as file:\n",
    "    chat_words_str = file.read()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 22,
=======
   "execution_count": 18,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'one minute Be Right Back'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chat_words_map_dict = {}\n",
    "chat_words_list = []\n",
    "\n",
    "for line in chat_words_str.split(\"\\n\"):\n",
    "    if line != \"\":\n",
    "        cw = line.split(\"=\")[0]\n",
    "        cw_expanded = line.split(\"=\")[1]\n",
    "        chat_words_list.append(cw)\n",
    "        chat_words_map_dict[cw] = cw_expanded\n",
    "\n",
    "def chat_words_conversion(text):\n",
    "    new_text = []\n",
    "    for w in text.split():\n",
    "        if w.upper() in chat_words_list:\n",
    "            new_text.append(chat_words_map_dict[w.upper()])\n",
    "        else:\n",
    "            new_text.append(w)\n",
    "    return \" \".join(new_text)\n",
    "\n",
    "chat_words_conversion(\"one minute BRB\")"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
=======
   "execution_count": 19,
   "metadata": {},
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "outputs": [],
   "source": [
    "#df.raw.apply(chat_words_conversion)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#not so good results\n",
    "\n",
    "def stem_words(text):\n",
    "    stemmer = PorterStemmer()\n",
    "    return \" \".join([stemmer.stem(word) for word in text.split()])\n",
    "\n",
    "#df[\"stemmed\"] = df[\"raw\"].apply(lambda text: stem_words(text))\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lemmatization"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 25,
=======
   "execution_count": 21,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'hello I be buy a fruit'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lemmatizer = WordNetLemmatizer()\n",
    "wordnet_map = {\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}\n",
    "\n",
    "def lemmatize_words(text):\n",
    "    pos_tagged_text = nltk.pos_tag(text.split())\n",
    "    return \" \".join([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) \n",
    "                     for word, pos in pos_tagged_text])\n",
    "    #return \" \".join([lemmatizer.lemmatize(word) for word in text.split()])\n",
    "\n",
    "ex = \"hello I am buying a fruit\"\n",
    "lemmatize_words(ex)\n",
    "#df[\"raw_lemmatized\"] = df[\"raw\"].apply(lambda text: lemmatize_words(text))\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tokenisation"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 26,
=======
   "execution_count": 22,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def tokenize(text):\n",
    "    tokens = re.split('\\W+', text)\n",
    "    return tokens\n",
    "\n",
    "#df['tweet_tokenized']=df[\"tweet_lower\"].apply(lambda text: tokenize(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tweet length"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 27,
=======
   "execution_count": 23,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [],
   "source": [
    "df['length']=df['raw'].apply(lambda x:len(x)-x.count(\" \"))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 33,
=======
   "execution_count": 24,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "<matplotlib.axes._subplots.AxesSubplot at 0x23367b9b588>"
      ]
     },
     "execution_count": 33,
=======
       "[<matplotlib.lines.Line2D at 0x7f993e015a90>]"
      ]
     },
     "execution_count": 24,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\n",
=======
      "image/png": "\n",
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.length.plot.hist(bins=7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Punctuation percentage"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 34,
=======
   "execution_count": 25,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_punct(text):\n",
    "    count = sum([1 for char in text if char in string.punctuation])\n",
    "    return round(count/(len(text)-text.count(\" \")),3)*100\n",
    "\n",
    "df['punct']=df['raw'].apply(count_punct)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 39,
=======
   "execution_count": 26,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "<matplotlib.axes._subplots.AxesSubplot at 0x2336814e7f0>"
      ]
     },
     "execution_count": 39,
=======
       "[<matplotlib.lines.Line2D at 0x7f993df4c310>]"
      ]
     },
     "execution_count": 26,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\n",
=======
      "image/png": "\n",
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
<<<<<<< HEAD
   "source": [
    "df.punct.plot.hist(bins=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6839.000000\n",
       "mean        4.508378\n",
       "std         3.661170\n",
       "min         0.000000\n",
       "25%         2.300000\n",
       "50%         3.900000\n",
       "75%         5.900000\n",
       "max        44.400000\n",
       "Name: punct, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
=======
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "source": [
    "df.punct.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Data analysis"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 47,
=======
   "execution_count": 27,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "C:\\Users\\carol\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: MatplotlibDeprecationWarning: \n",
      "The 'normed' kwarg was deprecated in Matplotlib 2.1 and will be removed in 3.1. Use 'density' instead.\n",
      "  \n",
      "C:\\Users\\carol\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: MatplotlibDeprecationWarning: \n",
=======
      "/home/victor/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: MatplotlibDeprecationWarning: \n",
      "The 'normed' kwarg was deprecated in Matplotlib 2.1 and will be removed in 3.1. Use 'density' instead.\n",
      "  \n",
      "/home/victor/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: MatplotlibDeprecationWarning: \n",
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
      "The 'normed' kwarg was deprecated in Matplotlib 2.1 and will be removed in 3.1. Use 'density' instead.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\n",
=======
      "image/png": "\n",
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins=np.linspace(0,15,30)\n",
    "plt.hist(df[df.has_reply==True]['punct'],bins, alpha=0.5, normed=True, label='Urgent')\n",
    "plt.hist(df[df.has_reply==False]['punct'],bins, alpha=0.5, normed=True, label='Non-Urgent')\n",
    "plt.legend(loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les features calculées n'ont pas l'air de différencier les tweets"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 52,
=======
   "execution_count": 28,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "count    5182.000000\n",
       "mean       29.248360\n",
       "std       194.049617\n",
       "min         0.000000\n",
       "25%         3.000000\n",
       "50%         5.000000\n",
       "75%        10.000000\n",
       "max      4435.000000\n",
       "Name: reply_time, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.reply_time.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x233687ae630>]"
      ]
     },
     "execution_count": 50,
=======
       "[<matplotlib.lines.Line2D at 0x7f993dda4350>]"
      ]
     },
     "execution_count": 28,
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
<<<<<<< HEAD
      "image/png": "\n",
=======
      "image/png": "\n",
>>>>>>> bcac06919c5782d7a7083a8b5a2f51a271797703
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Distribution of reply times\n",
    "plt.plot(df['reply_time'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5A. Model creation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Final pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"clean_tweet\"] = df[\"raw\"].apply(lambda text: remove_uppercase(text))\n",
    "df[\"clean_tweet\"] = df[\"clean_tweet\"].apply(lambda text: remove_punctuation(text))\n",
    "df[\"clean_tweet\"] = df[\"clean_tweet\"].apply(lambda text: remove_stopwords(text))\n",
    "#df[\"clean_tweet\"] = df[\"clean_tweet\"].apply(lambda text: remove_frequent_words(text))\n",
    "df[\"clean_tweet\"] = df[\"clean_tweet\"].apply(lambda text: lemmatize_words(text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"clean_tweet_tokenized\"] = df[\"clean_tweet\"].apply(lambda text: tokenize(text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['raw', 'reply_time', 'has_reply', 'length', 'punct', 'clean_tweet',\n",
       "       'clean_tweet_tokenized'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = CountVectorizer()\n",
    "X = matrix.fit_transform(df.clean_tweet).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose value to predict\n",
    "y = df.has_reply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.80,random_state=44)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Vectorization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model(mode):\n",
    "    # Intent to use default paramaters for show case\n",
    "    vect = None\n",
    "    if mode == 'count':\n",
    "        vect = CountVectorizer()\n",
    "    elif mode == 'tf':\n",
    "        vect = TfidfVectorizer(use_idf=False, norm='l2')\n",
    "    elif mode == 'tfidf':\n",
    "        vect = TfidfVectorizer()\n",
    "    #add n-gram\n",
    "    else:\n",
    "        raise ValueError('Mode should be either count or tfidf')\n",
    "    \n",
    "    return Pipeline([\n",
    "        ('vect', vect),\n",
    "        ('clf' , LogisticRegression(solver='newton-cg',n_jobs=-1))\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Choose model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=rf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5B. Model evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performance on test set :\n",
      "\n",
      "\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'accuracy_score' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-de1702edb74a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Accuracy : %.3f '\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'accuracy_score' is not defined"
     ]
    }
   ],
   "source": [
    "print('Performance on test set :')\n",
    "print('\\n')\n",
    "\n",
    "print('Accuracy : %.3f ' % accuracy_score(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature importance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## PRINT SCORES\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "balanced_accuracy = balanced_accuracy_score(y_test, y_pred)\n",
    "\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "\n",
    "\n",
    "string = \"RESULTATS \\n \\\n",
    "         Accuracy : {accuracy}% \\n \\\n",
    "Balanced Accuracy : {balanced_accuracy}% \\n \\\n",
    "         F1 score : {f1}\\n \\\n",
    "        Precision : {precision}% (how many selected items are relevant)\\n \\\n",
    "           Recall : {recall}% (how many relevant items are selected)\\n \\\n",
    "\\n\\n\\\n",
    "STATISTICS\\n\\\n",
    " Proportion of positives in test set    : {positives}%\\n\\\n",
    " Proportion of positives in predictions : {predicted_positives}%\\\n",
    "\"\n",
    "\n",
    "print(string.format(accuracy = round(100*accuracy,2),\n",
    "                    balanced_accuracy = round(100*balanced_accuracy,2),\n",
    "                    f1 = round(f1,4), \n",
    "                    precision = round(100*precision,2), \n",
    "                    recall = round(100*recall,2),\n",
    "                    positives = round(100*y_test.sum()/len(y_test),2),\n",
    "                    predicted_positives = round(100*y_pred.sum()/len(y_pred),2),\n",
    "                   ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## DISPLAY ROC CURVE\n",
    "roc_curve = roc_curve(y_test, model.predict_proba(X_test)[:, 1])\n",
    "\n",
    "plt.plot(roc_curve[0], roc_curve[1], color='darkorange',\n",
    "         lw=2)\n",
    "\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CONFUSION MATRIX\n",
    "titles_options = [(\"Confusion matrix, without normalization\", None),\n",
    "                  (\"Normalized confusion matrix\", 'true')]\n",
    "\n",
    "for title, normalize in titles_options:\n",
    "    disp = plot_confusion_matrix(model, X_test, y_test,\n",
    "                                 cmap=plt.cm.Blues,\n",
    "                                 normalize=normalize)\n",
    "    disp.ax_.set_title(title)\n",
    "\n",
    "    print(title)\n",
    "    print(disp.confusion_matrix)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
